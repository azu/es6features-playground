{"version":3,"file":"iterators.js","sources":["/Users/azu/Dropbox/workspace/toybox/es6features-playground/src/iterators.js","@traceur/generated/TemplateParser/1","@traceur/generated/TemplateParser/0","@traceur/generated/TemplateParser/2"],"names":[],"mappings":"AAAA,YAAY,CAAC;AACT,CAAJ,EAAI,CAAA,MAAM,EAAG,CAAA,OAAO,CAAC,cAAc,CAAC,CAAC;AACjC,CAAJ,EAAI,CAAA,KAAK,EAAG,CAAA,OAAO,CAAC,OAAO,CAAC,CAAC;AAC7B,CAAA,OAAQ,CAAC,UAAU;AACX,CAAJ,IAAI,CAAA,IAAI,CAAC;AACT,CAAA,WAAU,YAAM;AACZ,CAAA,OAAI,EAAG,CAAA,KAAK,KAAK,CAAC,OAAO,CAAE,MAAK,CAAC,CAAC;GACrC,EAAC,CAAC;AACH,CAAA,UAAS,YAAM;AACX,CAAA,OAAI,QAAQ,EAAE,CAAC;GAClB,EAAC,CAAC;AACH,CAAA,GAAE,CAAC,gBAAgB;AACX,CAAJ,MAAI,CAAA,SAAS,EAAG,GACf,CAAC;ACbV,CDcQ,kBCdO,YAAY,CDcnB,SAAS,CAAC,CAAA,MAAM,SAAS,CAAI,UAAU;SAC/B,CAAA,GAAG,EAAG,EAAC;AAAE,CAAA,YAAG,EAAG,EAAC;CACpB,WAAO,EACH,IAAI,CAAJ,UAAK;;CACD,gBAAa,EAAC,GAAG,CAAE,CAAA,GAAG,EAAG,IAAG,CAAC,CAA5B,IAAG,WAAE,IAAG,kBAAqB;CAC9B,eAAO;AAAE,CAAA,eAAI,CAAE,MAAK;AAAE,CAAA,gBAAK,CAAE,IAAG;CAAA,UAAE,CAAA;SACrC,CACJ,CAAA;KACJ,CCrBsC,CDqBrC;CErBF,QAAS,GAAA,OACA,CFsBK,SAAS,CGxBb,eAAe,WAAW,CDET,MAAM,SAAS,CCFa,CDEZ,ACFa,EDEX;CACpC,WAAiB,CACrB,EAAC,CAAC,MAAoB,CAAA,SAAsB,EAAE,CAAC,KAAK,GAAI;SFoBpD,EAAC;CAAe;CAErB,WAAI,CAAC,EAAG,KAAI,CAAE;CACV,eAAM;SACT;AACD,CADC,cACM,IAAI,CAAC,CAAC,CAAC,CAAC;OAClB;KEvBA;AFwBD,CExBC,SFwBK,CAAC,IAAI,OAAO,CAAC,CAAC;KACtB,CAAC;GACL,CAAC","sourcesContent":["\"use strict\";\nvar assert = require(\"power-assert\");\nvar sinon = require(\"sinon\");\ndescribe(\"Iterator\", ()=> {\n    var stub;\n    beforeEach(()=> {\n        stub = sinon.stub(console, \"log\");\n    });\n    afterEach(()=> {\n        stub.restore();\n    });\n    it(\"should iterate\", ()=> {\n        var fibonacci = {\n        };\n        fibonacci[Symbol.iterator] = function () {\n            let pre = 0, cur = 1;\n            return {\n                next() {\n                    [pre, cur] = [cur, pre + cur];\n                    return { done: false, value: cur }\n                }\n            }\n        };\n\n        for (var n of fibonacci) {\n            // truncate the sequence at 1000\n            if (n > 1000) {\n                break;\n            }\n            console.log(n);\n        }\n        assert(stub.called);\n    });\n});\n","$traceurRuntime.setProperty($__placeholder__0,\n          $__placeholder__1, $__placeholder__2)","\n        for (var $__placeholder__0 =\n                 $__placeholder__1[Symbol.iterator](),\n                 $__placeholder__2;\n             !($__placeholder__3 = $__placeholder__4.next()).done; ) {\n          $__placeholder__5;\n          $__placeholder__6;\n        }","$__placeholder__0[$traceurRuntime.toProperty($__placeholder__1)]"]}